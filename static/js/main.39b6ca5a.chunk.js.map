{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","cn","completed","title","TodoList","todos","map","getUserData","userId","usersFromServer","find","todosWithUsers","App","useState","setUserId","setTitle","titleError","setTitleError","userError","setUserError","setTodos","action","method","onSubmit","event","preventDefault","trimmedTitle","trim","test","newTodo","Math","max","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39b6ca5a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User | undefined,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos : Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUserData(userId: number) {\n  const userData = usersFromServer.find((user) => user.id === userId);\n\n  return userData || null;\n}\n\nexport const todosWithUsers: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserData(todo.userId),\n}));\n\nexport const App = () => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState('');\n  const [userError, setUserError] = useState('');\n  const [todos, setTodos] = useState(todosWithUsers);\n\n  function handleTitleInput(event: React.ChangeEvent<HTMLInputElement>) {\n    setTitle(event.target.value);\n    setTitleError('');\n  }\n\n  function handleUserSelection(event: React.ChangeEvent<HTMLSelectElement>) {\n    setUserId(+event.target.value);\n    setUserError('');\n  }\n\n  function clearErrors() {\n    setTitleError('');\n    setUserError('');\n  }\n\n  function handleOnAdd(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    const trimmedTitle = title.trim();\n\n    if (!userId) {\n      setUserError('Please choose a user');\n    } else {\n      setUserError('');\n    }\n\n    if (!trimmedTitle) {\n      setTitleError('Please enter a title');\n    } else {\n      setTitleError('');\n    }\n\n    const hasNonWhitespaceChars = /\\S/.test(trimmedTitle);\n\n    if (hasNonWhitespaceChars) {\n      const maxTodoId = Math.max(...todos.map((todo) => todo.id), 0);\n\n      const newTodo = {\n        id: maxTodoId + 1,\n        completed: false,\n        title: trimmedTitle,\n        userId: +userId,\n        user: getUserData(+userId),\n      };\n\n      setTodos([...todos, newTodo]);\n      setTitle('');\n      setUserId(0);\n      clearErrors();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleOnAdd}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title:</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleInput}\n          />\n          {titleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserSelection}\n          >\n            <option\n              value=\"0\"\n              disabled\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}